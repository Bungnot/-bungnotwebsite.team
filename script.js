// ================= ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î =================
function parseAmount(str) {
  if (!str) return 0;
  const m = String(str).match(/\d{2,}/g);
  if (!m) return 0;
  return parseInt(m[m.length - 1], 10) || 0;
}

function buildSettlementMessages(tableContainer) {
  const low   = parseInt(tableContainer.querySelector('.settle-low')?.value || '', 10);
  const high  = parseInt(tableContainer.querySelector('.settle-high')?.value || '', 10);
  const result= parseInt(tableContainer.querySelector('.settle-result')?.value || '', 10);
  const title = tableContainer.querySelector('.table-title-input')?.value?.trim() || '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ä‡πà‡∏≤‡∏á';

  if (Number.isNaN(low) || Number.isNaN(high) || Number.isNaN(result)) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ‡∏ï‡πà‡∏≥‚Äì‡∏™‡∏π‡∏á‚Äì‡∏ú‡∏• ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
    return;
  }

  let outcome;
  if (result < low) outcome = '‡∏ï‡πà‡∏≥';
  else if (result > high) outcome = '‡∏™‡∏π‡∏á';
  else outcome = '‡πÄ‡∏™‡∏°‡∏≠';

  const rows = Array.from(tableContainer.querySelectorAll('tbody tr'));
  const messages = [];

  if (outcome === '‡πÄ‡∏™‡∏°‡∏≠') {
    messages.push(`‡∏ú‡∏• ${result} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ${low}-${high} : ‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡∏Ñ‡∏¥‡∏î‡∏¢‡∏≠‡∏î)`);
  } else {
    const winnerSide = outcome === '‡∏ï‡πà‡∏≥' ? 'right' : 'left';
    rows.forEach(row => {
      const [left, price, right] = row.querySelectorAll('input');
      const amt = parseAmount(price.value);
      if (!amt) return;
      const win = amt * 0.9, lose = amt;
      if (winnerSide === 'left') {
        if (left.value) messages.push(`( ${title} +${win} ) ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ ${left.value}`);
        if (right.value) messages.push(`( ${title} -${lose} ) ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ ${right.value}`);
      } else {
        if (right.value) messages.push(`( ${title} +${win} ) ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ ${right.value}`);
        if (left.value) messages.push(`( ${title} -${lose} ) ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ ${left.value}`);
      }
    });
  }

  tableContainer.querySelector('.settle-output').value = messages.join('\n');
  navigator.clipboard.writeText(messages.join('\n'));
  alert('‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß');
}

// ================= ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï =================
function addRow(table) {
  const row = document.createElement("tr");
  row.innerHTML = `
    <td><input type="text" placeholder="@‡πÑ‡∏•‡∏ô‡πå‡∏Ñ‡∏ô‡πÑ‡∏•‡πà"></td>
    <td><input type="text" placeholder="‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô 300"></td>
    <td><input type="text" placeholder="@‡πÑ‡∏•‡∏ô‡πå‡∏Ñ‡∏ô‡∏¢‡∏±‡πâ‡∏á"></td>
    <td><button class="remove-row" onclick="removeRow(this)">X</button></td>
  `;
  table.querySelector("tbody").appendChild(row);
}

function removeRow(btn) {
  btn.closest("tr").remove();
}

function removeTable(btn) {
  btn.closest(".table-container").remove();
  saveData();
}

function addTable() {
  const container = document.getElementById("tables-container");
  const newTable = document.createElement("div");
  newTable.classList.add("table-container");
  newTable.innerHTML = `
    <button class="remove-table" onclick="removeTable(this)">X</button>
    <input type="text" class="table-title-input" placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ò‡∏ô‡∏†‡∏±‡∏ó‡∏£)">
    <table>
      <thead>
        <tr>
          <th> ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏•‡∏ô‡πå‡∏Ñ‡∏ô‡πÑ‡∏•‡πà</th>
          <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ô</th>
          <th> ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏•‡∏ô‡πå‡∏Ñ‡∏ô‡∏¢‡∏±‡πâ‡∏á</th>
          <th>‡πÅ‡∏ú‡∏•‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å X ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><input type="text" placeholder="@‡πÑ‡∏•‡∏ô‡πå‡∏Ñ‡∏ô‡πÑ‡∏•‡πà"></td>
          <td><input type="text" placeholder="‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô 300"></td>
          <td><input type="text" placeholder="@‡πÑ‡∏•‡∏ô‡πå‡∏Ñ‡∏ô‡∏¢‡∏±‡πâ‡∏á"></td>
          <td><button class="remove-row" onclick="removeRow(this)">X</button></td>
        </tr>
      </tbody>
    </table>

    <div class="settle-box">
      <label>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ä‡πà‡∏≤‡∏á:</label>
      <input class="settle-low" type="number" placeholder="‡∏ï‡πà‡∏≥ (‡πÄ‡∏ä‡πà‡∏ô 285)">
      <span style="justify-self:center">‚Äì</span>
      <input class="settle-high" type="number" placeholder="‡∏™‡∏π‡∏á (‡πÄ‡∏ä‡πà‡∏ô 295)">
      <label style="justify-self:end">‡∏ú‡∏•‡∏ö‡∏±‡πâ‡∏á‡πÑ‡∏ü:</label>
      <input class="settle-result" type="number" placeholder="‡∏ú‡∏• (‡πÄ‡∏ä‡πà‡∏ô 300)">
    </div>
    <div class="settle-actions">
      <button class="settle-btn" onclick="buildSettlementMessages(this.closest('.table-container'))">
        üí∞ ‡∏Ñ‡∏¥‡∏î‡∏¢‡∏≠‡∏î‡∏Ñ‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ
      </button>
    </div>
    <textarea class="settle-output" placeholder="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏∞‡∏°‡∏≤‡πÅ‡∏õ‡∏∞‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ (‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)"></textarea>

    <button class="add-row-button"
      onclick="addRow(this.closest('.table-container').querySelector('table'))">
      ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô
    </button>
  `;
  container.appendChild(newTable);
}

// ================= ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô localStorage =================
function saveData() {
  const data = [];
  const tables = document.querySelectorAll(".table-container");
  tables.forEach(t => {
    const title = t.querySelector(".table-title-input")?.value || "";
    const rows = [];
    t.querySelectorAll("tbody tr").forEach(r => {
      const c = r.querySelectorAll("input");
      rows.push([c[0]?.value||"", c[1]?.value||"", c[2]?.value||""]);
    });
    data.push({
      title, rows,
      low: t.querySelector('.settle-low')?.value || "",
      high: t.querySelector('.settle-high')?.value || "",
      res: t.querySelector('.settle-result')?.value || ""
    });
  });
  localStorage.setItem("savedTables", JSON.stringify(data));
}

function loadData() {
  const data = JSON.parse(localStorage.getItem("savedTables"));
  if (!data) return;
  const container = document.getElementById("tables-container");
  container.innerHTML = "";
  data.forEach(d => {
    const div = document.createElement("div");
    div.classList.add("table-container");
    let rows = "";
    d.rows.forEach(r=>{
      rows += `<tr>
        <td><input type="text" value="${r[0]||""}"></td>
        <td><input type="text" value="${r[1]||""}"></td>
        <td><input type="text" value="${r[2]||""}"></td>
        <td><button class="remove-row" onclick="removeRow(this)">X</button></td>
      </tr>`;
    });
    div.innerHTML = `
      <button class="remove-table" onclick="removeTable(this)">X</button>
      <input type="text" class="table-title-input" placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏¢" value="${d.title||""}">
      <table>
        <thead>
          <tr><th>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏•‡∏ô‡πå‡∏Ñ‡∏ô‡πÑ‡∏•‡πà</th><th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ô</th><th>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏•‡∏ô‡πå‡∏Ñ‡∏ô‡∏¢‡∏±‡πâ‡∏á</th><th>X</th></tr>
        </thead>
        <tbody>${rows}</tbody>
      </table>

      <div class="settle-box">
        <label>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ä‡πà‡∏≤‡∏á:</label>
        <input class="settle-low" type="number" placeholder="‡∏ï‡πà‡∏≥" value="${d.low||""}">
        <span style="justify-self:center">‚Äì</span>
        <input class="settle-high" type="number" placeholder="‡∏™‡∏π‡∏á" value="${d.high||""}">
        <label style="justify-self:end">‡∏ú‡∏•‡∏ö‡∏±‡πâ‡∏á‡πÑ‡∏ü:</label>
        <input class="settle-result" type="number" placeholder="‡∏ú‡∏•" value="${d.res||""}">
      </div>
      <div class="settle-actions">
        <button class="settle-btn" onclick="buildSettlementMessages(this.closest('.table-container'))">
          üí∞ ‡∏Ñ‡∏¥‡∏î‡∏¢‡∏≠‡∏î‡∏Ñ‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ
        </button>
      </div>
      <textarea class="settle-output" placeholder="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏∞‡∏°‡∏≤‡πÅ‡∏õ‡∏∞‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ (‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)"></textarea>
      <button class="add-row-button"
        onclick="addRow(this.closest('.table-container').querySelector('table'))">
        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô
      </button>
    `;
    container.appendChild(div);
  });
}

window.onload = loadData;
window.onbeforeunload = saveData;
