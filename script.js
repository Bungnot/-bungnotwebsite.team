let historyData = [];
let totalDeletedProfit = 0;

document.addEventListener("DOMContentLoaded", () => {
    loadData(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏õ‡∏¥‡∏î
    learnFromURL();
});

// ===== [ADD] LINE Auto-Send Config & Contact Book =====
const CHANNEL_ACCESS_TOKEN = "fmjqWDCs2Z1zL5z4o3+SNRTsSDMlYRUzgETICw6LZrCR36SanGMBWiy3v6Xl4aP9jk8TTD6p+zZtezzEkNLZgXEvffePBNtfFB2g8vjYzD6ba+vm3xt8l33d9Rn0ennRiUykVEUOqp27mbrTPfxuVQdB04t89/1O/w1cDnyilFU="; // TODO: ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ proxy ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

// ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠: map ‡∏ä‡∏∑‡πà‡∏≠ (‡∏´‡∏£‡∏∑‡∏≠ displayName) -> userId (Uxxxxxxxx)
// ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á localStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó/‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ
const LINE_ID_STORE_KEY = "line_id_book";
function loadLineIdBook(){
    try{ return JSON.parse(localStorage.getItem(LINE_ID_STORE_KEY) || "{}"); }catch(e){ return {}; }
}
function saveLineIdBook(book){
    localStorage.setItem(LINE_ID_STORE_KEY, JSON.stringify(book||{}));
}
let LINE_ID_BOOK = loadLineIdBook();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ "‡∏ö‡∏≠‡∏ó" ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏¢‡∏¥‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠->userId ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: https://your-dashboard?learn=1&name=‡∏ï‡πã‡∏≠‡∏á&uid=Uxxxx
function learnFromURL(){
    const usp = new URLSearchParams(location.search);
    if(usp.get("learn")==="1"){
        const name = (usp.get("name")||"").trim();
        const uid  = (usp.get("uid")||"").trim();
        if(name && uid){
            LINE_ID_BOOK[name] = uid;
            saveLineIdBook(LINE_ID_BOOK);
            console.log("[LEARN] saved mapping", name, uid);
        }
    }
}
// ‡πÉ‡∏´‡πâ backend ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å console ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
window.learnLineContact = function(name, uid){
    const n = (name||"").trim(), u=(uid||"").trim();
    if(!n || !u) return false;
    LINE_ID_BOOK[n]=u; saveLineIdBook(LINE_ID_BOOK); 
    console.log("[LEARN] saved mapping", n, u);
    return true;
}

// ‡∏Ñ‡∏∑‡∏ô userId ‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï "‡∏ä‡∏∑‡πà‡∏≠|Uxxxx" ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡∏™‡∏°‡∏∏‡∏î LINE_ID_BOOK
function getLineIdFromName(nameRaw){
    const name = (nameRaw||"").trim();
    if(!name) return "";
    if(name.includes("|")){
        const parts = name.split("|");
        return (parts[1]||"").trim();
    }
    return LINE_ID_BOOK[name] || "";
}

// ‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
const MSG_TPL_WIN = (title, amount) => `üéâ ‡∏ú‡∏•‡∏Ñ‡πà‡∏≤‡∏¢ ${title}\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ +${Math.round(amount).toLocaleString()} (‡∏´‡∏±‡∏Å 10% ‡πÅ‡∏•‡πâ‡∏ß)\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤ üôè`;
const MSG_TPL_LOSE = (title, amount) => `üì£ ‡∏ú‡∏•‡∏Ñ‡πà‡∏≤‡∏¢ ${title}\n‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞ -${Math.round(amount).toLocaleString()}\n‡πÇ‡∏õ‡∏£‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üôè`;

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö push ‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô
async function pushText(to, text){
    const res = await fetch("https://api.line.me/v2/bot/message/push", {
        method: "POST",
        headers: {"Content-Type":"application/json","Authorization":"Bearer "+CHANNEL_ACCESS_TOKEN},
        body: JSON.stringify({ to, messages: [{type:"text", text}] })
    });
    if(!res.ok){ throw new Error(await res.text()); }
}

// ‡∏™‡πà‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ/‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î autosend)
async function sendBulkLine(winList, loseList, autoSend){
    if(!autoSend) return;
    if(!CHANNEL_ACCESS_TOKEN || CHANNEL_ACCESS_TOKEN.includes("‡πÉ‡∏™‡πà")){
        alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CHANNEL_ACCESS_TOKEN");
        return;
    }
    const items = [...winList, ...loseList].filter(x=>!!x.lineId);
    if(items.length===0){
        alert("‡πÑ‡∏°‡πà‡∏°‡∏µ LINE ID ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô LINE_ID_BOOK ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏õ‡πá‡∏ô '‡∏ä‡∏∑‡πà‡∏≠|Uxxxx')");
        return;
    }
    const uniq = new Set(items.map(x=>x.lineId)).size;
    if(!confirm(`‡∏à‡∏∞‡∏™‡πà‡∏á ${items.length} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${uniq} ‡∏Ñ‡∏ô ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?`)) return;

    for(const it of items){
        const text = it.type==="win" ? MSG_TPL_WIN(it.title, it.amount) : MSG_TPL_LOSE(it.title, it.amount);
        try{
            await pushText(it.lineId, text);
            await new Promise(r=>setTimeout(r,250));
        }catch(e){
            console.error("‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", it, e);
        }
    }
    alert("‚úÖ ‡∏™‡πà‡∏á LINE ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
}

// =================== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏¥‡∏î‡∏¢‡∏≠‡∏î ===================
function calculateSettle(tableContainer) {
    try {
        const low = parseFloat(tableContainer.querySelector('.settle-low')?.value || '');
        const high = parseFloat(tableContainer.querySelector('.settle-high')?.value || '');
        const result = parseFloat(tableContainer.querySelector('.settle-result')?.value || '');
        const title = tableContainer.querySelector('.table-title-input')?.value?.trim() || '‡∏Ñ‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ';

        if (isNaN(low) || isNaN(high) || isNaN(result)) {
            alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ä‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≥‚Äì‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ö‡∏±‡πâ‡∏á‡πÑ‡∏ü ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô");
            return;
        }

        let outcome = '';
        if (result < low) outcome = '‡∏ï‡πà‡∏≥';
        else if (result > high) outcome = '‡∏™‡∏π‡∏á';
        else outcome = '‡πÄ‡∏™‡∏°‡∏≠';

        const rows = tableContainer.querySelectorAll("tbody tr");
        const messages = [];

        if (outcome === '‡πÄ‡∏™‡∏°‡∏≠') {
            messages.push(`‡∏ú‡∏• ${result} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ${low}-${high} ‚Üí ‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡∏Ñ‡∏¥‡∏î‡∏¢‡∏≠‡∏î)`);
        } else {
            const winnerSide = outcome === '‡∏ï‡πà‡∏≥' ? 'right' : 'left';
            rows.forEach(row => {
                const cells = row.querySelectorAll("td input");
                const nameLeft = cells[0]?.value.trim();
                const priceStr = cells[1]?.value.trim();
                const nameRight = cells[2]?.value.trim();

                const price = parseFloat((priceStr.match(/\d{2,}/g) || [])[0]);
                if (isNaN(price)) return;

                const winAmt = price * 0.9;
                const loseAmt = price;

                if (winnerSide === 'left') {
                    if (nameLeft) messages.push(`( ${title} +${winAmt} ) ‚Üí ${nameLeft}`);
                    if (nameRight) messages.push(`( ${title} -${loseAmt} ) ‚Üí ${nameRight}`);
                } else {
                    if (nameRight) messages.push(`( ${title} +${winAmt} ) ‚Üí ${nameRight}`);
                    if (nameLeft) messages.push(`( ${title} -${loseAmt} ) ‚Üí ${nameLeft}`);
                }
            });
        }

        const output = tableContainer.querySelector('.settle-output');
        output.value = messages.join("\n");
        navigator.clipboard.writeText(output.value);
        alert("‚úÖ ‡∏Ñ‡∏¥‡∏î‡∏¢‡∏≠‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß");
    } catch (err) {
        console.error(err);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î");
    }
}

// ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶ (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°; ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å) ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶

/* ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô addTable() ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏¥‡∏î‡∏¢‡∏≠‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏° ‡∏ú‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° checkbox ‚Äú‡∏™‡πà‡∏á LINE ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‚Äù ‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° */
/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡πÅ‡∏ó‡∏£‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏Ñ‡πà label/checkbox ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
/// <button ... onclick="calculateSettle(this.closest('.table-container'))">üí∞ ‡∏Ñ‡∏¥‡∏î‡∏¢‡∏≠‡∏î‡∏Ñ‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ</button>
/// <label style="margin-left:10px; user-select:none;"><input type="checkbox" class="settle-autosend"> ‡∏™‡πà‡∏á LINE ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</label>
/// <textarea class="settle-output" ...></textarea>

/// ‚Ä¶ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‚Ä¶
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
///
//
// ===== [ADD] override calculateSettle with autosend support =====
function calculateSettle(tableContainer) {
    try {
        const low = parseFloat(tableContainer.querySelector('.settle-low')?.value || '');
        const high = parseFloat(tableContainer.querySelector('.settle-high')?.value || '');
        const result = parseFloat(tableContainer.querySelector('.settle-result')?.value || '');
        const title = tableContainer.querySelector('.table-title-input')?.value?.trim() || '‡∏Ñ‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ';
        const autoSend = !!tableContainer.querySelector('.settle-autosend')?.checked;

        if (isNaN(low) || isNaN(high) || isNaN(result)) {
            alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ä‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≥‚Äì‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ö‡∏±‡πâ‡∏á‡πÑ‡∏ü ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô");
            return;
        }

        let outcome = '';
        if (result < low) outcome = '‡∏ï‡πà‡∏≥';
        else if (result > high) outcome = '‡∏™‡∏π‡∏á';
        else outcome = '‡πÄ‡∏™‡∏°‡∏≠';

        const rows = tableContainer.querySelectorAll("tbody tr");
        const messages = [];
        const winList = [];
        const loseList = [];

        if (outcome === '‡πÄ‡∏™‡∏°‡∏≠') {
            messages.push(`‡∏ú‡∏• ${result} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ${low}-${high} ‚Üí ‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡∏Ñ‡∏¥‡∏î‡∏¢‡∏≠‡∏î)`);
        } else {
            const winnerSide = outcome === '‡∏ï‡πà‡∏≥' ? 'right' : 'left';
            rows.forEach(row => {
                const cells = row.querySelectorAll("td input");
                const nameLeft = cells[0]?.value.trim();
                const priceStr = cells[1]?.value.trim();
                const nameRight = cells[2]?.value.trim();

                const price = parseFloat((priceStr.match(/\d{2,}/g) || [])[0]);
                if (isNaN(price)) return;

                const winAmt = price * 0.9;
                const loseAmt = price;

                if (winnerSide === 'left') {
                    if (nameLeft) {
                        messages.push(`( ${title} +${winAmt} ) ‚Üí ${nameLeft}`);
                        winList.push({type:"win", title, name:nameLeft, lineId:getLineIdFromName(nameLeft), amount:winAmt});
                    }
                    if (nameRight) {
                        messages.push(`( ${title} -${loseAmt} ) ‚Üí ${nameRight}`);
                        loseList.push({type:"lose", title, name:nameRight, lineId:getLineIdFromName(nameRight), amount:loseAmt});
                    }
                } else {
                    if (nameRight) {
                        messages.push(`( ${title} +${winAmt} ) ‚Üí ${nameRight}`);
                        winList.push({type:"win", title, name:nameRight, lineId:getLineIdFromName(nameRight), amount:winAmt});
                    }
                    if (nameLeft) {
                        messages.push(`( ${title} -${loseAmt} ) ‚Üí ${nameLeft}`);
                        loseList.push({type:"lose", title, name:nameLeft, lineId:getLineIdFromName(nameLeft), amount:loseAmt});
                    }
                }
            });
        }

        const output = tableContainer.querySelector('.settle-output');
        output.value = messages.join("\n");
        navigator.clipboard.writeText(output.value);

        // [ADD] autosend
        sendBulkLine(winList, loseList, autoSend);

        alert("‚úÖ ‡∏Ñ‡∏¥‡∏î‡∏¢‡∏≠‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß");
    } catch (err) {
        console.error(err);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î");
    }
}
